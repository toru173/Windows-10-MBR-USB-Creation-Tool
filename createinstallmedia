#!/bin/bash
#
# Usage: ./createinstallmedia /path/to/win10.iso /dev/diskX. Must be run as root
#
# This is a tool created to solve a specific need - to create a Windows 10
# installation USB for legacy BIOS systems using MBR, with minimal additional
# tools, on macOS. A couple of interesting things to note:
#
# - macOS has long included a tool to format NTFS-compatible partitions,
#   possibly since macOS Sierra as part of the Boot Camp Assistant program
# - macOS has had the ability to mount NTFS volumes read/write since at least
#   Mac OS X Snow Leopard
# - macOS has included fdisk for a long time. The man page is dated 2002!
#
# The only external utility required is ms-sys, available at http://ms-sys.sourceforge.net
# a compiled macOS binary is included here for ease of use. This utility mimics
# Apple's 'createinstallmedia' binary, per https://support.apple.com/HT201372

# Note the liberal use of redirection to /dev/null. The utilities in this script are chatty!

# Used to simulate the process without actually writing anything
DRYRUN=false

# trap ctrl-c and call ctrl_c()
trap ctrl_c INT

function ctrl_c() {
    killall rsync &> /dev/null
    echo "Received SIGKILL. Cleaning up..."
    diskutil unmountDisk $TARGET_DISK &> /dev/null
    wait
    hdiutil eject "$PWD"/.mnt/image &> /dev/null
    wait
    sleep 5
    rm -rf "$PWD"/.mnt
    exit 1
}

USAGE_STRING="Usage: ./createinstallmedia /path/to/win10.iso /dev/diskX\nMust be run as root"

if [ $# != 2 ]; then
    echo -e $USAGE_STRING
    exit 1
fi

if [ `whoami` != "root" ]; then
    echo -e $USAGE_STRING
    exit 1
fi

WINDOWS_ISO=$1
TARGET_DISK=$2
TARGET_VOLUME="${TARGET_DISK}s1"

FORMAT_NTFS=/System/Library/Filesystems/ntfs.fs/Contents/Resources/BootCampFormatter

CURRENT_DIR=$PWD

echo "Ready to start."
echo "To continue we need to erase the device at $TARGET_DISK"

while true; do
    read -p "If you wish to continue type (Y) then press return: " yn
    if [[ "$yn" = "y" ]]; then break; fi
    if [[ "$yn" = "Y" ]]; then break; fi
    if [[ "$yn" = "n" ]]; then exit 0; fi
    if [[ "$yn" = "N" ]]; then exit 0; fi
    echo "Type (N) if you wish to exit."
done

mkdir -p "$PWD"/.mnt/{image,target}
hdiutil attach "$WINDOWS_ISO" -nobrowse -mountpoint "$PWD"/.mnt/image &> /dev/null

if [ $? != 0 ]; then
    echo "Error: Unable to mount Windows 10 image file"
    echo "($WINDOWS_ISO)"
    rm -rf "$PWD"/.mnt
    exit 1
fi

if [ $DRYRUN = false ]; then
    diskutil quiet eraseDisk exfat Untitled MBR $TARGET_DISK &
    echo -n "Erasing disk"
    while [ $(pgrep -x diskutil) ]; do
        sleep 1
        echo -n "."
    done
fi

if [ $? != 0 ]; then
    echo "Error when attempting to format $TARGET_DISK"
    hdiutil eject "$PWD"/.mnt/image &> /dev/null
    wait
    rm -rf "$PWD"/.mnt
    exit 1
fi

# If we're here, we've been able to partition a disk and we have an iso at
# $WINDOWS_ISO mounted at $PWD/.mnt

if [ $DRYRUN = false ]; then
    diskutil unmountDisk $TARGET_DISK &> /dev/null
    wait
    $FORMAT_NTFS -v "Install Windows 10" $TARGET_VOLUME &> /dev/null &
    while [ $(pgrep -n -x BootCampFormatter) ]; do
        echo -n "."
        sleep 1
    done
fi

echo ""
echo -n "Copying installer files to disk"

if [ $DRYRUN = false ]; then
    mount -w -t ntfs -o rw,nobrowse $TARGET_VOLUME "$PWD"/.mnt/target
fi

if [ $DRYRUN = false ]; then
    rsync -ar "$PWD"/.mnt/image/* "$PWD"/.mnt/target &> /dev/null &
    while [ $(pgrep -n -x rsync) ]; do
        sleep 5
        echo -n "."
    done
    echo ""
    echo "Copy complete."
    diskutil unmountDisk $TARGET_DISK &> /dev/null
    wait
fi

echo "Making disk bootable..."

if [ $DRYRUN = false ]; then
    diskutil unmountDisk $TARGET_DISK &> /dev/null
    wait
    echo $'flag 1\nwrite\nexit' | fdisk -e $TARGET_DISK &> /dev/null
fi

echo "Copying boot files..."

if [ $DRYRUN = false ]; then
    diskutil unmountDisk $TARGET_DISK &> /dev/null
    wait
    ./ms-sys/ms-sys -n $TARGET_VOLUME &> /dev/null
    diskutil unmountDisk $TARGET_DISK &> /dev/null
    wait
    ./ms-sys/ms-sys -7 $TARGET_DISK &> /dev/null
fi

diskutil unmountDisk $TARGET_DISK &> /dev/null
wait
hdiutil eject "$PWD"/.mnt/image &> /dev/null
wait
rm -rf "$PWD"/.mnt

echo "Done."

diskutil mount $TARGET_VOLUME  &> /dev/null
wait
open "/Volumes/Install Windows 10"
